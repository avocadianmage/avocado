//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AvocadoClient.AvocadoServerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Job", Namespace="http://schemas.datacontract.org/2004/07/AvocadoServer.ServerCore")]
    [System.SerializableAttribute()]
    public partial class Job : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AvocadoServerService.IServerAPI")]
    public interface IServerAPI {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAPI/Ping", ReplyAction="http://tempuri.org/IServerAPI/PingResponse")]
        bool Ping();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAPI/Ping", ReplyAction="http://tempuri.org/IServerAPI/PingResponse")]
        System.Threading.Tasks.Task<bool> PingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAPI/GetJobs", ReplyAction="http://tempuri.org/IServerAPI/GetJobsResponse")]
        AvocadoClient.AvocadoServerService.Job[] GetJobs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAPI/GetJobs", ReplyAction="http://tempuri.org/IServerAPI/GetJobsResponse")]
        System.Threading.Tasks.Task<AvocadoClient.AvocadoServerService.Job[]> GetJobsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAPI/RunJob", ReplyAction="http://tempuri.org/IServerAPI/RunJobResponse")]
        void RunJob(string app, string name, int secInterval, string[] args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAPI/RunJob", ReplyAction="http://tempuri.org/IServerAPI/RunJobResponse")]
        System.Threading.Tasks.Task RunJobAsync(string app, string name, int secInterval, string[] args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAPI/KillJob", ReplyAction="http://tempuri.org/IServerAPI/KillJobResponse")]
        void KillJob(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAPI/KillJob", ReplyAction="http://tempuri.org/IServerAPI/KillJobResponse")]
        System.Threading.Tasks.Task KillJobAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerAPIChannel : AvocadoClient.AvocadoServerService.IServerAPI, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerAPIClient : System.ServiceModel.ClientBase<AvocadoClient.AvocadoServerService.IServerAPI>, AvocadoClient.AvocadoServerService.IServerAPI {
        
        public ServerAPIClient() {
        }
        
        public ServerAPIClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServerAPIClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerAPIClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerAPIClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Ping() {
            return base.Channel.Ping();
        }
        
        public System.Threading.Tasks.Task<bool> PingAsync() {
            return base.Channel.PingAsync();
        }
        
        public AvocadoClient.AvocadoServerService.Job[] GetJobs() {
            return base.Channel.GetJobs();
        }
        
        public System.Threading.Tasks.Task<AvocadoClient.AvocadoServerService.Job[]> GetJobsAsync() {
            return base.Channel.GetJobsAsync();
        }
        
        public void RunJob(string app, string name, int secInterval, string[] args) {
            base.Channel.RunJob(app, name, secInterval, args);
        }
        
        public System.Threading.Tasks.Task RunJobAsync(string app, string name, int secInterval, string[] args) {
            return base.Channel.RunJobAsync(app, name, secInterval, args);
        }
        
        public void KillJob(int id) {
            base.Channel.KillJob(id);
        }
        
        public System.Threading.Tasks.Task KillJobAsync(int id) {
            return base.Channel.KillJobAsync(id);
        }
    }
}
